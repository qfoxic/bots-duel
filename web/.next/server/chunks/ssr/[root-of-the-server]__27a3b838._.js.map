{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/types/Bot.ts"],"sourcesContent":["export enum BotType {\n  AUTO = 'auto',\n  MANUAL = 'manual'\n}\n\nexport interface Bot {\n  id: string\n  type: BotType\n}\n"],"names":[],"mappings":";;;;AAAO,IAAA,AAAK,iCAAA;;;WAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/contexts/BotsContext.tsx"],"sourcesContent":["\"use client\"\n\nimport React, {\n  createContext, useContext, useState, useEffect, ReactNode,\n  useRef, useCallback, useMemo\n} from 'react'\nimport { Bot, BotType } from '@/types/Bot'\nimport { TournamentEvents, EventType } from '@/types/Message'\n\ntype MessageHandler = (message: TournamentEvents) => void;\ntype ConnectionStatus = 'connecting' | 'connected' | 'disconnected' | 'error';\n\ninterface BotsContextType {\n  currentBot: Bot | null;\n  setCurrentBot: React.Dispatch<React.SetStateAction<Bot | null>>\n  // Connection status can be 'connecting', 'connected', 'disconnected', or 'error'\n  connectionStatus: ConnectionStatus\n  sendWebSocketMessage: (message: TournamentEvents) => boolean\n  onMessage: (messageType: EventType, handler: MessageHandler) => () => void\n  connectWebSocket: () => void\n  disconnectWebSocket: () => void\n  saveBotToSession: (bot: Bot) => void\n}\n\nconst SESSION_STORAGE_KEY = 'dots-duel-current-bot'\nconst WS_BASE = process.env.NEXT_PUBLIC_WS_URL ?? 'ws://localhost:8000'\n\nconst generateRandomBot = (): Bot => {\n  const randomId = Math.random().toString().slice(2, 10)\n  return { id: randomId, type: BotType.MANUAL }\n}\n\nconst BotsContext = createContext<BotsContextType | undefined>(undefined)\n\nexport function BotsProvider({ children }: { children: ReactNode }) {\n  const [currentBot, setCurrentBot] = useState<Bot | null>(null);\n  const [connectionStatus, setConnectionStatus] =\n    useState<ConnectionStatus>('disconnected');\n\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectAttempt = useRef(0);\n  const reconnectTimer = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const messageHandlers = useRef<Map<string, Set<MessageHandler>>>(new Map());\n  const messageBuffer = useRef<Map<string, TournamentEvents[]>>(new Map());\n\n  const clearReconnectTimer = () => {\n    if (reconnectTimer.current) {\n      clearTimeout(reconnectTimer.current)\n      reconnectTimer.current = null\n    }\n  };\n\n  function enqueueMessage(msg: TournamentEvents) {\n    const arr = messageBuffer.current.get(msg.type) ?? [];\n    arr.push(msg);\n    messageBuffer.current.set(msg.type, arr);\n    processQueue(msg.type);\n  };\n\n  function processQueue(messageType: EventType) {\n    const handlers = messageHandlers.current.get(messageType);\n    if (!handlers || handlers.size === 0) return;\n\n    const queue = messageBuffer.current.get(messageType);\n    if (!queue || queue.length === 0) return;\n\n    const toDeliver = queue.splice(0, queue.length);\n    messageBuffer.current.set(messageType, []);\n\n    for (const m of toDeliver) {\n      for (const h of handlers) {\n        try { h(m); } catch (e) { console.error(e); }\n      }\n    }\n  };\n\n  const sendWebSocketMessage = useCallback((message: TournamentEvents): boolean => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message))\n      return true\n    }\n    return false\n  }, []);\n  const saveBotToSession = useCallback((bot: Bot) => {\n    try {\n      if (typeof window !== 'undefined') sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(bot))\n    } catch { }\n  }, []);\n  const loadBotFromSession = useCallback((): Bot | null => {\n    try {\n      if (typeof window !== 'undefined') {\n        const s = sessionStorage.getItem(SESSION_STORAGE_KEY)\n        return s ? (JSON.parse(s) as Bot) : null\n      }\n      return null\n    } catch {\n      return null\n    }\n  }, []);\n  const onMessage = useCallback((messageType: EventType, handler: MessageHandler) => {\n    let set = messageHandlers.current.get(messageType);\n    if (!set) {\n      set = new Set();\n      messageHandlers.current.set(messageType, set);\n    }\n    set.add(handler);\n\n    processQueue(messageType);\n\n    return () => {\n      const s = messageHandlers.current.get(messageType);\n      if (!s) return;\n      s.delete(handler);\n      if (s.size === 0) messageHandlers.current.delete(messageType);\n    };\n  }, []);\n  const connect = useCallback(() => {\n    const bot = loadBotFromSession();\n    if (!bot || ws.current && (ws.current.readyState === WebSocket.OPEN || ws.current.readyState === WebSocket.CONNECTING))\n      return\n\n    clearReconnectTimer();\n    setConnectionStatus('connecting');\n    const url = `${WS_BASE}/ws/${bot.id}`;\n    const socket = new WebSocket(url);\n    ws.current = socket\n\n    socket.onopen = () => {\n      reconnectAttempt.current = 0;\n      setConnectionStatus('connected');\n    }\n\n    socket.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data) as TournamentEvents;\n        enqueueMessage(message);\n      } catch (e) {\n        console.error('Error parsing WebSocket message:', e);\n      }\n    }\n\n    socket.onclose = (evt) => {\n      ws.current = null\n      setConnectionStatus('disconnected')\n\n      // Reconnect on non-normal closes (avoid tight loops)\n      if (evt.code !== 1000) {\n        const attempt = Math.min(reconnectAttempt.current + 1, 5)\n        reconnectAttempt.current = attempt\n        const delay = Math.min(1000 * 2 ** (attempt - 1), 8000)\n        clearReconnectTimer()\n        reconnectTimer.current = setTimeout(() => connect(), delay)\n      }\n    }\n\n    socket.onerror = () => {\n      setConnectionStatus('error')\n    }\n  }, []);\n  const disconnect = useCallback(() => {\n    clearReconnectTimer()\n    const s = ws.current\n    ws.current = null\n    if (!s) return\n    try {\n      if (s.readyState === WebSocket.OPEN || s.readyState === WebSocket.CONNECTING)\n        s.close(1000)\n    } catch { }\n  }, []);\n\n  useEffect(() => {\n    connect();\n    const fromSession = loadBotFromSession(); // will be null on first run\n    const bot = fromSession ?? generateRandomBot();\n    setCurrentBot(bot);\n    if (!fromSession)\n      saveBotToSession(bot);\n\n    return () => {\n      disconnect()\n    }\n  }, []);\n\n  const contextValue = useMemo<BotsContextType>(() => ({\n    saveBotToSession,\n    currentBot,\n    setCurrentBot,\n    connectionStatus,\n    sendWebSocketMessage,\n    onMessage,\n    connectWebSocket: connect,\n    disconnectWebSocket: disconnect,\n  }), [connect, connectionStatus, currentBot, disconnect, onMessage, saveBotToSession, sendWebSocketMessage])\n\n  return (\n    <BotsContext.Provider value={contextValue}>\n      {children}\n    </BotsContext.Provider>\n  )\n}\n\nexport function useBots() {\n  const ctx = useContext(BotsContext)\n  if (!ctx) throw new Error('useBots must be used within a BotsProvider')\n  return ctx\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/contexts/TournamentsContext.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react'\nimport { Tournament } from '@/types/Tournament'\n\ninterface TournamentsContextType {\n  tournaments: Tournament[]\n  currentTournament: Tournament | null\n  setCurrentTournament: React.Dispatch<React.SetStateAction<Tournament | null>>\n  setTournaments: React.Dispatch<React.SetStateAction<Tournament[]>>\n}\n\nconst TournamentsContext = createContext<TournamentsContextType | undefined>(undefined)\n\nexport function TournamentsProvider({ children }: { children: ReactNode }) {\n  const [tournaments, setTournaments] = useState<Tournament[]>([])\n  const [currentTournament, setCurrentTournament] = useState<Tournament | null>(null)\n\n  return (\n    <TournamentsContext.Provider value={{\n      tournaments,\n      setTournaments,\n      currentTournament,\n      setCurrentTournament\n    }}>\n      {children}\n    </TournamentsContext.Provider>\n  )\n}\n\nexport function useTournaments() {\n  const context = useContext(TournamentsContext)\n  if (context === undefined) {\n    throw new Error('useTournaments must be used within a TournamentsProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AAFA;;;AAYA,MAAM,mCAAqB,IAAA,sNAAa,EAAqC;AAEtE,SAAS,oBAAoB,EAAE,QAAQ,EAA2B;IACvE,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAe,EAAE;IAC/D,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,iNAAQ,EAAoB;IAE9E,qBACE,8OAAC,mBAAmB,QAAQ;QAAC,OAAO;YAClC;YACA;YACA;YACA;QACF;kBACG;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,IAAA,mNAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,QAAQ;;KAElC;IACL,IAAIF,QAAQC,GAAG,CAACK,yBAAyB,EAAE;;SAcpC;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;QAGT,OAAO;;IAOT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n"],"names":["module","exports","require","vendored","React"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,KAAK","ignoreList":[0],"debugId":null}}]
}