{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/types/Tournament.ts"],"sourcesContent":["import { Bot } from './Bot';\n\nexport enum TournamentStatus {\n  UPCOMING = 'upcoming',\n  ACTIVE = 'active',\n  COMPLETED = 'completed'\n};\n\n\nexport type Tournament = {\n  id: string;\n  owner: Bot; // Added owner field to track who created the tournament\n  bot: Bot;\n  status: TournamentStatus;\n  participants: string[];\n  dims: [number, number];\n};\n\nexport const GRID_ROWS = 30;\nexport const GRID_COLS = 30;\n"],"names":[],"mappings":";;;;;;;;AAEO,IAAA,AAAK,0CAAA;;;;WAAA;;AAgBL,MAAM,YAAY;AAClB,MAAM,YAAY","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/components/TournamentCard.tsx"],"sourcesContent":["'use client'\nimport { Tournament } from '@/types/Tournament'\nimport { Bot } from '@/types/Bot'\n\ninterface TournamentCardProps {\n  tournament: Tournament\n  currentBot: Bot | null\n  onJoin: (tournament: Tournament) => void\n}\n\nconst statusColors = {\n  active: 'bg-green-100 text-green-800',\n  upcoming: 'bg-yellow-100 text-yellow-800',\n  completed: 'bg-gray-100 text-gray-800',\n}\n\nexport const TournamentCard = ({ tournament, currentBot, onJoin }: TournamentCardProps) => {\n  const { status } = tournament\n  const canJoin = currentBot && status === 'upcoming'\n\n  return (\n    <div className=\"px-4 py-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors border border-gray-200\">\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <div className=\"text-lg font-semibold text-gray-800\">\n            {tournament.owner.id}\n            {tournament.owner.id === currentBot!.id && (<span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[status]}`}>\n              owner\n            </span>)}\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[status]}`}>\n            {status}\n          </span>\n          {canJoin && (\n            <button\n              onClick={() => onJoin(tournament)}\n              className=\"px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-semibold rounded-lg transition-colors\"\n            >\n              Join\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAUA,MAAM,eAAe;IACnB,QAAQ;IACR,UAAU;IACV,WAAW;AACb;AAEO,MAAM,iBAAiB;QAAC,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAuB;IACpF,MAAM,EAAE,MAAM,EAAE,GAAG;IACnB,MAAM,UAAU,cAAc,WAAW;IAEzC,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;4BACZ,WAAW,KAAK,CAAC,EAAE;4BACnB,WAAW,KAAK,CAAC,EAAE,KAAK,WAAY,EAAE,kBAAK,6LAAC;gCAAK,WAAW,AAAC,8CAAkE,OAArB,YAAY,CAAC,OAAO;0CAAI;;;;;;;;;;;;;;;;;8BAKvI,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAK,WAAW,AAAC,8CAAkE,OAArB,YAAY,CAAC,OAAO;sCAChF;;;;;;wBAEF,yBACC,6LAAC;4BACC,SAAS,IAAM,OAAO;4BACtB,WAAU;sCACX;;;;;;;;;;;;;;;;;;;;;;;AAQb;KA/Ba","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/components/ConnectionStatus.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react';\n\nexport type ConnectionState = 'connecting' | 'connected' | 'disconnected' | 'error';\n\ninterface ConnectionStatusProps {\n  status: ConnectionState;\n}\n\nexport const ConnectionStatus: React.FC<ConnectionStatusProps> = ({ status }) => {\n  const statusColors: Record<ConnectionState, string> = {\n    connected: 'bg-green-500',\n    connecting: 'bg-yellow-500',\n    error: 'bg-red-500',\n    disconnected: 'bg-gray-400',\n  };\n\n  const getStatusText = (): string => {\n    return status.charAt(0).toUpperCase() + status.slice(1);\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <div className={`w-2 h-2 rounded-full ${statusColors[status]}`} />\n      <span className=\"text-xs text-gray-600\">{getStatusText()}</span>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;;AAUO,MAAM,mBAAoD;QAAC,EAAE,MAAM,EAAE;IAC1E,MAAM,eAAgD;QACpD,WAAW;QACX,YAAY;QACZ,OAAO;QACP,cAAc;IAChB;IAEA,MAAM,gBAAgB;QACpB,OAAO,OAAO,MAAM,CAAC,GAAG,WAAW,KAAK,OAAO,KAAK,CAAC;IACvD;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAW,AAAC,wBAA4C,OAArB,YAAY,CAAC,OAAO;;;;;;0BAC5D,6LAAC;gBAAK,WAAU;0BAAyB;;;;;;;;;;;;AAG/C;KAlBa","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/components/Section.tsx"],"sourcesContent":["'use client'\nimport React from 'react';\n\ninterface SectionProps {\n  title: string;\n  /** Tailwind color classes like 'bg-blue-500', 'bg-green-400', etc. */\n  color: string;\n  children: React.ReactNode;\n}\n\nexport const Section: React.FC<SectionProps> = ({ title, color, children }) => (\n  <div className=\"bg-white rounded-xl shadow-lg p-6\">\n    <h2 className=\"text-2xl font-bold mb-6 text-gray-800 flex items-center\">\n      {title}\n    </h2>\n    <div className=\"space-y-3\">{children}</div>\n  </div>\n);\n"],"names":[],"mappings":";;;;;AAAA;;AAUO,MAAM,UAAkC;QAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE;yBACxE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BACX;;;;;;0BAEH,6LAAC;gBAAI,WAAU;0BAAa;;;;;;;;;;;;;KALnB","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/app/page.tsx"],"sourcesContent":["'use client'\nimport { useRouter } from 'next/navigation'\nimport { useEffect } from 'react'\nimport { Tournament, GRID_COLS, GRID_ROWS, TournamentStatus } from '@/types/Tournament'\nimport { BotType } from '@/types/Bot'\nimport { useBots } from '@/contexts/BotsContext'\nimport { useTournaments } from '@/contexts/TournamentsContext'\nimport { TournamentCard } from '@/components/TournamentCard'\nimport { ConnectionStatus } from '@/components/ConnectionStatus'\nimport { Section } from '@/components/Section'\n\n\nexport default function Home() {\n  const { currentBot, connectionStatus, setCurrentBot, sendWebSocketMessage, onMessage, saveBotToSession } = useBots();\n  const { tournaments, setTournaments, currentTournament, setCurrentTournament } = useTournaments();\n  const router = useRouter()\n\n  const handleJoinTournament = (tournament: Tournament) => {\n    if (!currentBot)\n      return;\n\n    setCurrentTournament(tournament);\n\n    sendWebSocketMessage({\n      type: 'JoinTournament',\n      tournament: {\n        ...tournament,\n        bot: currentBot\n      }\n    });\n    router.push(`/match`);\n  }\n\n  const handleCreateTournament = () => {\n    if (!currentBot)\n      return;\n\n    const tournamentData: Tournament = {\n      id: Math.random().toString().substring(2, 10),\n      owner: currentBot, // Set the current bot as the owner\n      bot: currentBot,\n      status: TournamentStatus.UPCOMING,\n      participants: [currentBot.id],\n      dims: [GRID_ROWS, GRID_COLS]\n    }\n\n    setCurrentTournament(tournamentData);\n    setTournaments(prev => {\n      return [...prev, tournamentData];\n    });\n    sendWebSocketMessage({\n      type: 'CreateTournament',\n      tournament: tournamentData\n    });\n  }\n\n  const handleSetBotType = (bt: BotType) => {\n    if (!currentBot) return;\n    currentBot.type = bt;\n    saveBotToSession(currentBot);\n    setCurrentBot({ ...currentBot });\n  };\n\n  useEffect(() => {\n    const unjoin = onMessage('JoinTournament', (message) => {\n      setTournaments(prev => {\n        const existingIndex = prev.findIndex(t => t.id === message.tournament.id);\n        if (existingIndex >= 0) {\n          const updated = [...prev];\n          updated[existingIndex] = message.tournament;\n          return updated;\n        } else {\n          return [...prev, message.tournament];\n        }\n      });\n    });\n    const uncreate = onMessage('CreateTournament', (message) => {\n      setTournaments(prev => {\n        return [...prev, message.tournament];\n      });\n    });\n\n    return () => {\n      unjoin();\n      uncreate();\n    }\n  }, [onMessage, setTournaments])\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Current Bot Header */}\n        {currentBot && (\n          <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1 min-w-0\">\n                <h2 className=\"text-xl font-bold text-gray-800 truncate\">{currentBot.id} <span><ConnectionStatus status={connectionStatus} /></span></h2>\n                <div className=\"mt-1 flex items-center gap-4 flex-wrap\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <div className=\"inline-flex rounded-md border border-gray-300 bg-white\">\n                      <button\n                        type=\"button\"\n                        onClick={() => handleSetBotType(BotType.MANUAL)}\n                        className={`px-2.5 py-1 text-xs transition ${currentBot.type === BotType.MANUAL\n                          ? 'bg-gray-900 text-white'\n                          : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                      >\n                        manual bot\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleSetBotType(BotType.AUTO)}\n                        className={`px-2.5 py-1 text-xs transition border-l border-gray-300 ${currentBot.type === BotType.AUTO\n                          ? 'bg-gray-900 text-white'\n                          : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                      >\n                        auto bot\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <button\n                onClick={handleCreateTournament}\n                disabled={!!currentTournament}\n                className={`px-4 py-2 font-semibold rounded-lg transition-colors ${!currentTournament\n                  ? 'bg-green-600 hover:bg-green-700 text-white cursor-pointer'\n                  : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n                  }`}\n              >\n                Create Tournament\n              </button>\n            </div>\n          </div>\n        )}\n\n        <Section title=\"Tournaments\" color=\"bg-green-500\">\n          {tournaments.map((tournament: Tournament) => (\n            <TournamentCard\n              key={tournament.id}\n              tournament={tournament}\n              currentBot={currentBot}\n              onJoin={handleJoinTournament}\n            />\n          ))}\n        </Section>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///Users/volodymyrpaslavskyy/projects/bots-duel/web/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}